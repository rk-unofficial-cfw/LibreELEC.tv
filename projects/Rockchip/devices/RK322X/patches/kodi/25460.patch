From 7a58ce3730408065374ce6049c683b452f289a49 Mon Sep 17 00:00:00 2001
From: GTechAlpha <31323818+GTechAlpha@users.noreply.github.com>
Date: Sat, 6 Jul 2024 21:24:41 -0500
Subject: [PATCH] RetroPlayer: Fix gameloop

---
 xbmc/cores/RetroPlayer/playback/GameLoop.cpp | 81 +++++++-------------
 xbmc/cores/RetroPlayer/playback/GameLoop.h   | 10 +--
 2 files changed, 31 insertions(+), 60 deletions(-)

diff --git a/xbmc/cores/RetroPlayer/playback/GameLoop.cpp b/xbmc/cores/RetroPlayer/playback/GameLoop.cpp
index 1abf258ce7453..171777fd3af24 100644
--- a/xbmc/cores/RetroPlayer/playback/GameLoop.cpp
+++ b/xbmc/cores/RetroPlayer/playback/GameLoop.cpp
@@ -16,7 +16,6 @@ using namespace RETRO;
 using namespace std::chrono_literals;
 
 #define DEFAULT_FPS 60 // In case fps is 0 (shouldn't happen)
-#define FOREVER_MS (7 * 24 * 60 * 60 * 1000) // 1 week is large enough
 
 CGameLoop::CGameLoop(IGameLoopCallback* callback, double fps)
   : CThread("GameLoop"), m_callback(callback), m_fps(fps ? fps : DEFAULT_FPS), m_speedFactor(0.0)
@@ -56,75 +55,47 @@ void CGameLoop::Process(void)
 {
   while (!m_bStop)
   {
-    if (m_speedFactor == 0.0)
+    if (m_loopSpeedFactor != m_speedFactor)
+    {
+      m_lastFrameUs = std::chrono::microseconds::zero();
+      m_loopSpeedFactor = m_speedFactor;
+    }
+
+    if (m_loopSpeedFactor == 0.0)
     {
-      m_lastFrameMs = 0.0;
       m_sleepEvent.Wait(5000ms);
     }
     else
     {
-      if (m_speedFactor > 0.0)
+      if (m_lastFrameUs == std::chrono::microseconds::zero())
+        m_lastFrameUs = NowUs();
+
+      if (m_loopSpeedFactor > 0.0)
         m_callback->FrameEvent();
-      else if (m_speedFactor < 0.0)
+      else if (m_loopSpeedFactor < 0.0)
         m_callback->RewindEvent();
 
-      if (m_lastFrameMs > 0.0)
-      {
-        m_lastFrameMs += FrameTimeMs();
-        m_adjustTime = m_lastFrameMs - NowMs();
-      }
-      else
-      {
-        m_lastFrameMs = NowMs();
-        m_adjustTime = 0.0;
-      }
-
-      // Calculate sleep time
-      double sleepTimeMs = SleepTimeMs();
-
-      // Sleep at least 1 ms to avoid sleeping forever
-      while (sleepTimeMs > 1.0)
-      {
-        m_sleepEvent.Wait(std::chrono::milliseconds(static_cast<unsigned int>(sleepTimeMs)));
-
-        if (m_bStop)
-          break;
-
-        // Speed may have changed, update sleep time
-        sleepTimeMs = SleepTimeMs();
-      }
+      std::chrono::microseconds nextFrameUs = (m_lastFrameUs += FrameTimeUs());
+
+      std::chrono::microseconds sleepTimeUs = (nextFrameUs - NowUs());
+
+      if (sleepTimeUs > std::chrono::microseconds::zero())
+        m_sleepEvent.Wait(sleepTimeUs);
     }
   }
 }
 
-double CGameLoop::FrameTimeMs() const
+std::chrono::microseconds CGameLoop::FrameTimeUs() const
 {
-  if (m_speedFactor != 0.0)
-    return 1000.0 / m_fps / std::abs(m_speedFactor);
+  if (m_loopSpeedFactor != 0.0)
+    return std::chrono::duration_cast<std::chrono::microseconds>(1s / m_fps /
+                                                                 std::abs(m_loopSpeedFactor));
   else
-    return 1000.0 / m_fps / 1.0;
-}
-
-double CGameLoop::SleepTimeMs() const
-{
-  // Calculate next frame time
-  const double nextFrameMs = m_lastFrameMs + FrameTimeMs();
-
-  // Calculate sleep time
-  double sleepTimeMs = (nextFrameMs - NowMs()) + m_adjustTime;
-
-  // Reset adjust time
-  m_adjustTime = 0.0;
-
-  // Positive or zero
-  sleepTimeMs = (sleepTimeMs >= 0.0 ? sleepTimeMs : 0.0);
-
-  return sleepTimeMs;
+    return std::chrono::duration_cast<std::chrono::microseconds>(1s / m_fps);
 }
 
-double CGameLoop::NowMs() const
+std::chrono::microseconds CGameLoop::NowUs() const
 {
-  return std::chrono::duration<double, std::milli>(
-             std::chrono::steady_clock::now().time_since_epoch())
-      .count();
+  return std::chrono::duration_cast<std::chrono::microseconds>(
+      std::chrono::steady_clock::now().time_since_epoch());
 }
diff --git a/xbmc/cores/RetroPlayer/playback/GameLoop.h b/xbmc/cores/RetroPlayer/playback/GameLoop.h
index 4ed8c87fe5795..e8efff374e20e 100644
--- a/xbmc/cores/RetroPlayer/playback/GameLoop.h
+++ b/xbmc/cores/RetroPlayer/playback/GameLoop.h
@@ -12,6 +12,7 @@
 #include "threads/Thread.h"
 
 #include <atomic>
+#include <chrono>
 
 namespace KODI
 {
@@ -54,15 +55,14 @@ class CGameLoop : protected CThread
   void Process() override;
 
 private:
-  double FrameTimeMs() const;
-  double SleepTimeMs() const;
-  double NowMs() const;
+  std::chrono::microseconds FrameTimeUs() const;
+  std::chrono::microseconds NowUs() const;
 
   IGameLoopCallback* const m_callback;
   const double m_fps;
   std::atomic<double> m_speedFactor;
-  double m_lastFrameMs = 0.0;
-  mutable double m_adjustTime = 0.0;
+  double m_loopSpeedFactor{0};
+  std::chrono::microseconds m_lastFrameUs{std::chrono::microseconds::zero()};
   CEvent m_sleepEvent;
 };
 } // namespace RETRO
